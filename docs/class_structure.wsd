@startuml Ai Islands
skinparam class {
    BackgroundColor Snow
    BorderColor Black
    FontName Arial
    FontColor Black
    FontStyle Normal
    ArrowThickness 1
}
skinparam linetype ortho
!define RECTANGLE class


' RECTANGLE FastAPI {
' }

package "Backend" {
    RECTANGLE LibraryControl  #LightBlue {
        + 
    }

    RECTANGLE PlaygroundControl  #LightBlue {

        + create_playground(playground_id: str, playground_name: str, 
        playground_description: str): Playground
        + delete_playground(playground_id: str): None
        + update_playground(playground_id: str, playground_name: str, playground_description: str, 
        playground_models: List[str], playground_chain: List[str]): None
        + list_playgrounds(): List[str]
        + run_playground(playground_id: str): None
        + stop_playground(playground_id: str): None
        + add_model_to_playground(playground_id: str, model_id: str): None
        + add_chain_to_playground(playground_id: str, chain_id: str): None
    }

    RECTANGLE ModelControl  #LightBlue {
        - active_models: List[Dict[str, Any]]
        - hardware_preference: str
        - LibraryControl: LibraryControl
        __init__()
        + download_model(model_id: str): bool
        + load_model(model_id: str): bool
        + unload_model(model_id: str): bool
        + inference(model_id: str, request_payload: Any): Any
        + list_active_models(): List[str]
        + delete_model(model_id: str): bool
        - _get_model_class(model_source: str): Type
    }

    RECTANGLE TransformerModel  #LightGreen {
        - model_id: str
        - model: Any
        - tokenizer: Any
        - processor: Any
        __init__(model_id: str)
        + download(model_id: str): None
        + load(model_id: str): None
        + inference(request_payload: Any): Any
        + train(data_path: str, epochs: int = 100): Any
    }

    RECTANGLE UltralyticsModel  #LightGreen {
        - model_id: str
        - model: Any
        __init__()
        + download(model_id: str): None
        + load(model_id: str): None
        + inference(image_path: str): Any
        + train(data_path: str, epochs: int = 100): Any
    }

    RECTANGLE WatsonModel  #LightGreen;line.bold {
        - model_id: str
        - config: dict
        - auth: Authentication
        - account_info: AccountInfo
        - model_inference: ModelInference
        - embeddings: WatsonxEmbeddings
        - api_key: str
        - project_id: str
        - chat_history: List[dict]
        - is_loaded: bool
        + __init__(model_id: str)
        + {static} download(model_id: str, model_info: dict): dict
        + load(device: str, model_info: dict): bool
        + inference(data: dict): Any
        + clear_chat_history(): None
    }

    RECTANGLE WatsonService  #LightGreen;line.bold {
        - model_id: str
        - config: dict
        - auth: Authentication
        - account_info: AccountInfo
        - nlu: NaturalLanguageUnderstandingV1
        - text_to_speech: TextToSpeechV1
        - speech_to_text: SpeechToTextV1
        - api_key: str
        - is_loaded: bool
        + __init__(model_id: str)
        + {static} download(model_id: str, model_info: dict): dict
        + load(device: str, model_info: dict): bool
        + inference(data: dict): Any
    }

    RECTANGLE Playground  #LightCyan {
        - playground_id: str
        - playground_name: str
        - playground_description: str
        - playground_models: List[str]
        - playground_chain: List[str]
        __init__()
    }

    RECTANGLE RuntimeControl  #LightBlue{

    }

    RECTANGLE ModelRouter  #LightPink{

    }

    RECTANGLE PlaygroundRouter #LightPink {

    }

    RECTANGLE SettingRouter  #LightPink {

    }

    RECTANGLE DataRouter  #LightPink {

    }
    RECTANGLE LibraryRouter  #LightPink {

    }
}

ModelControl --> TransformerModel : uses
ModelControl --> UltralyticsModel : uses
ModelControl --> WatsonModel : uses
ModelControl --> WatsonService : uses
ModelControl --> LibraryControl : uses
ModelControl --> RuntimeControl : uses

PlaygroundControl --> Playground : uses
PlaygroundControl --> ModelControl : uses
PlaygroundControl --> LibraryControl : uses
PlaygroundControl --> RuntimeControl : uses

ModelRouter --> ModelControl: uses
PlaygroundRouter --> PlaygroundControl: uses
LibraryRouter --> LibraryControl: uses


package "Frontend" {
    RECTANGLE LibraryService {

    }

    RECTANGLE PlaygroundService {

    }

    RECTANGLE ModelService {

    }
    RECTANGLE DataService {

    }
    RECTANGLE SettingService {

    }
}

LibraryService --> LibraryRouter : uses
PlaygroundService --> PlaygroundRouter : uses
ModelService --> ModelRouter : uses
DataService --> DataRouter : uses
SettingService --> SettingRouter : uses



' FastAPI --> PlaygroundControl : uses
' FastAPI --> LibraryControl : uses
' FastAPI --> ModelControl : uses
@enduml